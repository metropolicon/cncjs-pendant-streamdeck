import { preview } from '@/vendor/gcodethumbnail/gcodethumbnail'
import { MachinetoGrid } from '@/vendor/gcodethumbnail/gcodethumbnail'
import { calculateRatio } from '@/vendor/gcodethumbnail/gcodethumbnail'
import { drawMpos } from '@/vendor/gcodethumbnail/gcodethumbnail'
import { clickgrid } from '@/vendor/gcodethumbnail/clictomove'
import { useCncStore } from '@/stores/cnc'
import { useUiStore } from '@/stores/ui'
import { useGcodeStore } from '@/stores/gcode'



const animatedWait = (delay) => () => {
  return new Promise((resolve) => setTimeout(resolve, delay))
}
const defaultColors = {
  G0: '#ffff35',
  G1: '#ffffff',
  G2G3: '#ffffff',
}

export const renderToolpath = (
  canvas,
  parsedGcode,
  settings,
  callback = () => {},
  halted = () => false
) => {
  const gcode = useGcodeStore()
  const machinesize=useCncStore().getLimitsXYZ()
  const colors = { ...defaultColors, ...(settings.colors || {}) }
  const options = { autosize: true, ...settings }
  const size=parsedGcode.size
 
  // -------------------------------------
//  console.log("*********************************")
     
  const machinesizeX=parseFloat(machinesize['x'])
  const machinesizeY=parseFloat(machinesize['y'])
  const canvasWidth=canvas.width
  const canvasHeight=canvas.height 
  
  const rayon=parseInt((15*canvas.height)/1080)
  
  var canvasPosition=document.getElementsByClassName('canvasposition')[0]  
  canvasPosition.id     = "CursorPosition";
  canvasPosition.width  = rayon*2;
  canvasPosition.height = rayon*2;  
  canvasPosition.style.zIndex   = 999;
  canvasPosition.style.position = "absolute";
  canvasPosition.style.top= "0px";
  canvasPosition.style.left= "0px";  
  
  const ctxPosition = canvasPosition.getContext('2d')
  var first=true
  // -------------------------------------
  const drawLine = preview(parsedGcode.size, colors, options, canvas,machinesize,first)
  if (!drawLine) {
    return
  }
  first=false
  var startXY=gcode.getStartXY()
  // console.log("STARTXY:",startXY)
  if (options.animate) {
    animatedDraw({
      lines: parsedGcode.lines,
      drawLine,
      duration: 4000,
      throttle: settings.throttle,
      callback,
      halted,
    })
  } else 
    {
    draw(parsedGcode.lines, drawLine, callback, halted)
  }
  var MposX=65535;
  var MposY=65535;
  let targetDimensions = {}   
  const imageWidth = Math.abs(size.max.x - size.min.x)
  const imageHeight = Math.abs(size.max.y - size.min.y)
  const RatioX=(canvas.width/parseFloat(gcode.displayDimensions.width)) //imageWidth
  const RatioY=(canvas.height/parseFloat(gcode.displayDimensions.depth)) //imageHeight 
  const DiffX=parseInt((canvasWidth-canvas.width)/2)-rayon
  const DiffY=parseInt(canvas.height)+parseInt((canvasHeight-canvas.height)/2)-rayon
  
  
  
  if (canvas.height>0) {
    drawMpos(ctxPosition,rayon)
    startXY=gcode.getStartXY()
  setInterval(function() {
    var newValue = useCncStore().getWpos();
    if (MposX!=newValue['x'] || MposY!=newValue['y'])
    
    {
    
       
        MposX=newValue['x']
        MposY=newValue['y']
        //console.log("MPOS x/y:",MposX,',',MposY)
        var MposNX=parseInt(MposX*RatioX)+DiffX+parseInt(startXY["x"])
        var MposNY=DiffY-parseInt(MposY*RatioY)
        //console.log("MPOS after x/y:",MposNX,',',MposNY,"(",startXY["x"],")")
        canvasPosition.style.top= ""+MposNY+"px";
        canvasPosition.style.left= ""+MposNX+"px";
        
       
        
    }
  }, 5); //
}
}

// *************************telex***************
export const renderClicmove = (
  canvas, 
  settings  
) => {
  
  const ui = useUiStore()
  const machinesize=useCncStore().getLimitsXYZ()
  const getMpos=useCncStore().getMpos
  const options = { autosize: true, ...settings }
  clickgrid( options, canvas,machinesize,ui.orientation,getMpos)
  
  
}

//------------------

function* chunkLines(lines, size = 1) {
  for (let i = 0, l = lines.length; i < l; i += size) {
    yield [i + size, lines.slice(i, i + size)]
  }
}

const animatedDraw = async ({
  lines,
  drawLine,
  duration,
  callback,
  halted,
  throttle,
}) => {
  let fps = 30
  if (throttle) {
    fps = 1000 / throttle
  }
  const linesPerFrame = Math.max(
    1,
    Math.floor(lines.length / ((duration / 1000) * fps))
  )

  const wait = animatedWait(1000 / fps)
  const gen = chunkLines(lines, linesPerFrame)
  for (const [index, chunk] of gen) {
    if (halted()) {
      return
    }
    chunk.forEach(drawLine)
    callback(index)
    await wait()
  }
  callback(lines.length)
}

const draw = async (lines, drawLine, callback, halted) => {
  let nextWait = Date.now()
  const wait = animatedWait(60)
  for (const [index, line] of Object.entries(lines)) {
    if (halted()) {
      return
    }
    drawLine(line)
    if (Date.now() > nextWait) {
      callback(index)
      await wait()
      nextWait = Date.now() + 50
    }
  }
  callback(lines.length)
}
